openapi: 3.0.0
info:
  description: Mock API for vue-typescript-admin-template.
  version: 1.0.1
  title: Mock API
  contact:
    email: armourcy@email.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: /mock-api/v1
tags:
  - name: articles
    description: Articles data related api.
  - name: roles
    description: Roles related api.
  - name: transations
    description: Transations data related api.
  - name: users
    description: Users related api.
paths:
  /users:
    get:
      tags:
        - users
      summary: Get Users list
      description: Return a list of users
      operationId: getUsers
      security:
        - AccessTokenAuth: []
      parameters:
        - name: name
          in: query
          description: Used to filter users by matched username substring
          scheme:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              scheme:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      items:
                        type:
                          array
                        items:
                          $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'
  /users/register:
    post:
      tags:
        - users
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: register
      parameters:
        - name: user
          in: query
          required: true
          description: The data for created user.
          schema:
            $ref: '#/components/schemas/User'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
    /users/login:
      post:
        tags:
          - users
        summary: Logs user into the system
        description: Use username and password to login.
        operationId: login
        parameters:
          - name: useranme
            in: query
            required: true
            description: The user name for login.
            schema:
              $ref: '#/components/schemas/User/properties/username'
          - name: password
            in: query
            required: true
            description: The password for login in clear text.
            schema:
              $ref: '#/components/schemas/User/properties/password'
        responses:
          200:
            description: OK
            headers:
              X-Rate-Limit:
                schema:
                  type: integer
                  format: int32
                description: calls per hour allowed by the user.
              X-Expires-After:
                schema:
                  type: string
                  format: date-time
                description: date in UTC when token expires.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    code:
                      type: integer
                      format: int32
                    data:
                      type: object
                      properties:
                        accessToken:
                          type: string
                          example: admin-token
          400:
            $ref: '#/components/reponses/InvalidUser'

components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    Article:
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          type: string
          enum:
            - draft
            - published
            - deleted
        title:
          type: string
          example: IG Won World Championship
        abstractContent:
          type: string
          example: Invictus Gaming sweeps Fnatic 3-0 to win League of Legends World Championship
        fullContent:
          type: string
          example: Article details goes here...
        sourceURL:
          type: string
          format: url
          example: https://www.espn.com/esports/story/_/id/25164094/invictus-gaming-sweeps-fnatic-3-0-win-league-legends-world-championship
        imageURL:
          type: string
          format: url
          example: https://a1.espncdn.com/combiner/i?img=/photo/2018/1103/r458060_1296x729_16-9.jpg&w=920&h=518&scale=crop&cquality=80&location=origin&format=jpg
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        platforms:
          type: array
          items:
            type: string
            enum:
              - a-platform
              - b-platform
              - c-platform
          uniqueItems: true
        disableComment:
          type: boolean
          example: false
        importance:
          type: integer
          format: int32
          enum:
            - 1
            - 2
            - 3
        author:
          type: string
          example: Chong Guo
        reviewer:
          type: string
          example: Chong Guo
        type:
          type: string
          enum:
            - CN
            - US
            - JP
            - EU
        pageviews:
          $ref: '#/components/schemas/Pageviews/properties/pageviews'
      required:
        - id
        - status
        - title
        - timestamp
        - importance
        - author
    Pageviews:
      type: object
      properties:
        key:
          type: string
          enum:
            - PC
            - Mobile
            - iOS
            - Android
        pageviews:
          type: integer
          format: int32
          example: 1024
      required:
        - key
        - pageviews
    Transaction:
      type: object
      properties:
        orderId:
          type: string
          format: uuid
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        username:
          type: string
          example: Chong Guo
        price:
          type: number
          format: double
        status:
          type: string
          enum:
            - success
            - pending
      required:
        - orderId
        - timestamp
        - username
        - price
        - status
    Role:
      type: object
      properties:
        key:
          type: string
          example: admin
        name:
          type: sring
          example: admin
        description:
          type: string
          example: Super Administrator. Have access to view all pages.
        routes:
          $ref: '#/components/schemas/AnyValue'
      required:
        - key
        - name
        - routes
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
          example: Armour
        password:
          type: string
          example: 12345678
        name:
          type: string
          example: Chong Guo
        email:
          type: string
          example: armourcy@gmail.com
        phone:
          type: string
          example: 13888888888
        avatar:
          type: string
          format: url
        introduction:
          type: string
          example: Always Sunshine
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role/properties/key'
      required:
        - id
        - username
        - password
        - roles
    Timestamp:
      onfOf:
      - type: integer
        format: int32
        example: 1559605283
      - type: string
        format: date-time
        example: 2017-07-21T17:32:28Z
    AnyValue: {}
